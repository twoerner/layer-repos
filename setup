#!/bin/bash
# vim: noexpandtab ts=8 sts=8 sw=8
# Copyright (C) 2015-present Trevor Woerner <twoerner@gmail.com>
# based on work from  Otavio Salvador <otavio@ossystems.com.br>
#
# This program is free software; you can redistribute it and/or modify
# it under the terms of the GNU General Public License version 2 as
# published by the Free Software Foundation.
#
# This program is distributed in the hope that it will be useful,
# but WITHOUT ANY WARRANTY; without even the implied warranty of
# MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
# GNU General Public License for more details.
#
# You should have received a copy of the GNU General Public License along
# with this program; if not, write to the Free Software Foundation, Inc.,
# 51 Franklin Street, Fifth Floor, Boston, MA 02110-1301 USA.

# cleanup on return
__orc_cleanup() {
	unset __orc_OEROOT __orc_TEMPLATECONF __orc_CMDLINEOPTS __orc_NOGUI
	unset __orc_tmpMACHINES __orc_MAC __orc_MACHLAYR __orc_MACHINES
	unset __orc_tmpSDKMACHINES __orc_SDKMACHINES
	unset __orc_tmpDISTROS __orc_DIS __orc_DISTLYR __orc_DISTROS
	unset __orc_NEWPATHS __orc_IMAGETARGETS
	if [ $__orc_MACHINEdefined -ne 1 ]; then
		unset MACHINE
	fi
	if [ $__orc_SDKMACHINEdefined -ne 1 ]; then
		unset SDKMACHINE
	fi
	if [ $__orc_DISTROdefined -ne 1 ]; then
		unset DISTRO
	fi
	if [ $__orc_DLDIRdefined -ne 1 ]; then
		unset DL_DIR
	fi
	unset __orc_MACHINEdefined __orc_SDKMACHINEdefined __orc_DISTROdefined __orc_DLDIRdefined
	if [ -n "$BUILDDIR" ]; then
		export BUILDDIR
	fi

	unset __orc_choose __orc_dldir __orc_machinesNlayers __orc_sdkmachines __orc_distrosNlayers __orc_imagesNlayers
	unset __orc_cleanup
}
trap __orc_cleanup RETURN

# check for some variables to see if they're already defined
__orc_MACHINEdefined=0
__orc_SDKMACHINEdefined=0
__orc_DISTROdefined=0
__orc_DLDIRdefined=0
if [ -n "$MACHINE" ]; then
	__orc_MACHINEdefined=1
fi
if [ -n "$SDKMACHINE" ]; then
	__orc_SDKMACHINEdefined=1
fi
if [ -n "$DISTRO" ]; then
	__orc_DISTROdefined=1
fi
if [ -n "$DL_DIR" ]; then
	__orc_DLDIRdefined=1
fi

# $1 - an array of choices
# $2 - an array of the layers corresponding 1:1 with the choices in $1 (optional)
# $3 - title
# $4 - selection help
# return - what the user chose, or ""
__orc_NOGUI=0
__orc_choose() {
	local _MENULIST=""
	local _i
	local -a _CHOICES=("${!1}")
	local -a _LAYERS=("${!2}")
	local _TITLE="$3"
	local _HELP="$4"
	local _CHOICE=""

	which dialog > /dev/null 2>&1
	if [ $? -eq 0 -a $__orc_NOGUI -eq 0 ]; then
		for ((_i=0; _i<${#_CHOICES[*]}; ++_i)); do
			if [ -n "$2" ]; then
				_MENULIST="$_MENULIST ${_CHOICES[$_i]} ${_LAYERS[$_i]}"
			else
				_MENULIST="$_MENULIST ${_CHOICES[$_i]} ${_CHOICES[$_i]}"
			fi
		done
		_CHOICE=$(dialog --title "$_TITLE" --menu "$_HELP" 0 0 $_i $_MENULIST 3>&1 1>&2 2>&3)
	else
		which whiptail > /dev/null 2>&1
		if [ $? -eq 0 -a $__orc_NOGUI -eq 0 ]; then
			for ((_i=0; _i<${#_CHOICES[*]}; ++_i)); do
				if [ -n "$2" ]; then
					_MENULIST="$_MENULIST ${_CHOICES[$_i]} ${_LAYERS[$_i]} OFF\n"
				else
					_MENULIST="$_MENULIST ${_CHOICES[$_i]} OFF\n"
				fi
			done
			_CHOICE=$(whiptail --title "$_TITLE" --radiolist "$_HELP" $_i 100 $_i $_MENULIST 3>&1 1>&2 2>&3)
		else
			help select > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				echo $_TITLE >&2
				for ((_i=0; _i<${#_CHOICES[*]}; ++_i)); do
					if [ -n "$2" ]; then
						_MENULIST="$_MENULIST ${_CHOICES[$_i]}(${_LAYERS[$_i]})"
					else
						_MENULIST="$_MENULIST ${_CHOICES[$_i]}"
					fi
				done
				PS3="$_HELP by entering a number: "
				select _CHOICE in $_MENULIST; do
					if [ -n "$_CHOICE" ]; then
						_CHOICE=$(echo $_CHOICE | cut -d'(' -f1)
						break
					fi
					echo "invalid choice, please try again" >&2
				done
			else
				echo "no available choosers" >&2
			fi
		fi
	fi

	echo $_CHOICE
}

__orc_dldir() {
	local _tmpdldir=""
	local _helpstring="Please indicate the location of your DL_DIR (downloads directory): "

	help read > /dev/null 2>&1
	if [ $? -eq 0 ]; then
		read -e -p "$_helpstring" _tmpdldir
	else
		which dialog > /dev/null 2>&1
		if [ $? -eq 0 ]; then
			_tmpdldir=$(dialog --inputbox "$_helpstring" 0 0 3>&1 1>&2 2>&3)
		else
			which whiptail > /dev/null 2>&1
			if [ $? -eq 0 ]; then
				_tmpdldir=$(whiptail --inputbox "$_helpstring" 0 0 3>&1 1>&2 2>&3)
			fi
		fi
	fi

	echo $_tmpdldir
}

# return in $1 all known MACHINEs(layer)
__orc_machinesNlayers() {
	local _outvar=$1
	local _tmp

	_tmp=$(find layers -print | grep "conf/machine/.*\.conf" | grep -v scripts | grep -v meta-poky | sed -e 's/\.conf//g' | awk -F'/' '{print $NF "(" $2 ")"}' | sort)
	eval $_outvar="'$_tmp'"
}

# return in $1 all SDKMACHINEs
__orc_sdkmachines() {
	local _outvar=$1
	local _tmp

	_tmp="i686 x86_64"
	eval $_outvar="'$_tmp'"
}

# return in $1 all DISTROs(layers)
__orc_distrosNlayers() {
	local _outvar=$1
	local _tmp

	_tmp=$(ls layers/*/conf/distro/*.conf layers/*/*/conf/distro/*.conf | grep -v defaultsetup | sed -e 's/\.conf//g' | awk -F'/' '{print $NF "(" $2 ")"}' | sort)
	_tmp="nodistro(openembedded-core) $_tmp"
	eval $_outvar="'$_tmp'"
}

# return in $1 all IMAGEs(layers)
__orc_imagesNlayers() {
	local _outvar=$1
	local _tmp

	_tmp=$(find layers -print | grep ".*images.*bb" | grep -v meta-poky | sed -e 's/\.bb//g' | awk -F'/' '{print $NF "(" $2 ")"}' | sort)
	eval $_outvar="'$_tmp'"
}

__orc_OEROOT=$PWD

if [ "$0" = "$BASH_SOURCE" ]; then
	# check we're in the right location
	if [ ! -d $__orc_OEROOT/layers ]; then
		echo "It doesn't look like I'm being run in the correct location."
		echo "I can't find where the layers are stored."
		echo "\$__orc_OEROOT/layers: $__orc_OEROOT/layers"
		exit 1
	fi

	if [ $# -eq 0 ]; then
		__orc_CMDLINEOPTS="-m -s -d -i --"
	else
		__orc_CMDLINEOPTS=$(getopt -o msdic --long machines,sdkmachines,distros,images,config -- "$@")
		if [ $? != 0 ]; then
			echo "ERROR: bad cmdline"
			exit 1
		fi
	fi
	eval set -- "$__orc_CMDLINEOPTS"
	while true; do
		case "$1" in
			-m|--machines)
				__orc_machinesNlayers __orc_MACHINES
				echo -e "\nAvailable Machines:"
				echo $__orc_MACHINES | tr ' ' '\n' | sed -e 's/^/\t/' | sed -e 's/(/ (/'
				;;
			-s|--sdkmachines)
				__orc_sdkmachines __orc_SDKMACHINES
				echo -e "\nAvailable SDK Machines:"
				echo $__orc_SDKMACHINES | tr ' ' '\n' | sed -e 's/^/\t/'
				;;
			-d|--distros)
				__orc_distrosNlayers __orc_DISTROS
				echo -e "\nAvailable Distros:"
				echo $__orc_DISTROS | tr ' ' '\n' | sed -e 's/^/\t/' | sed -e 's/(/ (/'
				;;
			-i|--images)
				__orc_imagesNlayers IMAGES
				echo -e "\nAvailable Images:"
				echo $IMAGES | tr ' ' '\n' | sed -e 's/^/\t/' | sed -e 's/(/ (/'
				;;
			-c|--config)
				if [ -r build/conf/auto.conf ]; then
					cat build/conf/auto.conf
				else
					echo "Can't find build/conf/auto.conf"
				fi
				;;
			--)
				break
				;;
			*)
				echo "ERROR: internal error! ($1)"
				exit 1
				;;
		esac
		shift
	done
	exit
fi

__orc_CMDLINEOPTS=$(getopt -o g --long no-gui -- "$@")
if [ $? != 0 ]; then
	echo "ERROR: bad cmdline"
	return
fi
eval set -- "$__orc_CMDLINEOPTS"
while true; do
	case "$1" in
		-g|--no-gui)
			__orc_NOGUI=1
			;;
		--)
			shift
			break
			;;
		*)
			echo "ERROR: internal error! ($1)"
			return
			;;
	esac
	shift
done

if [ "$(whoami)" = "root" ]; then
	echo "ERROR: do not use this setup program as root!"
	return
fi

# check we're in the right location
if [ ! -d $__orc_OEROOT/layers ]; then
	echo "It doesn't look like I'm being run in the correct location."
	echo "I can't find where the layers are stored."
	return
fi

## choose a MACHINE
if [ -z "$MACHINE" ]; then
	declare -a __orc_MACHINES
	declare -a __orc_MACHLAYR
	__orc_machinesNlayers __orc_tmpMACHINES
	for __orc_MAC in $__orc_tmpMACHINES; do
		__orc_MACHINES+=($(echo $__orc_MAC | cut -d'(' -f1))
		__orc_MACHLAYR+=($(echo $__orc_MAC | cut -d'(' -f2 | cut -d')' -f1))
	done
	MACHINE=$(__orc_choose __orc_MACHINES[@] __orc_MACHLAYR[@] "Available machines" "Please choose a machine")
	echo ""

	# guard against Ctrl-D or cancel
	if [ -z "$MACHINE" ]; then
		echo ""
		echo "To choose a machine interactively please install bash, dialog, or whiptail."
		echo "To choose a machine non-interactively please use the following syntax:"
		echo "    MACHINE=<your-machine> . setup"
		echo ""
		echo "Possible <your-machine> choices are:"
		echo ${__orc_MACHINES[*]} | tr ' ' '\n' | sed -e 's/^/\t/'
		return
	fi
fi

## choose an SDKMACHINE
if [ -z "$SDKMACHINE" ]; then
	declare -a __orc_SDKMACHINES
	__orc_sdkmachines __orc_tmpSDKMACHINES
	__orc_SDKMACHINES=($__orc_tmpSDKMACHINES)
	SDKMACHINE=$(__orc_choose __orc_SDKMACHINES[@] "" "Available SDKs" "Please choose an SDK machine")
	echo ""

	if [ -z "$SDKMACHINE" ]; then
		echo "To choose an SDK machine interactively please install bash, dialog, or whiptail."
		echo "To choose a machine non-interactively please use the following syntax:"
		echo "    SDKMACHINE=<your-sdk-machine> . setup"
		echo ""
		echo "Possible <your-sdk-machine> choices are:"
		echo ${__orc_SDKMACHINES[*]} | tr ' ' '\n' | sed -e 's/^/\t/'
		return
	fi
fi

## choose a DISTRO
if [ -z "$DISTRO" ]; then
	declare -a __orc_DISTROS
	__orc_distrosNlayers __orc_tmpDISTROS
	for __orc_DIS in $__orc_tmpDISTROS; do
		__orc_DISTROS+=($(echo $__orc_DIS | cut -d'(' -f1))
		__orc_DISTLYR+=($(echo $__orc_DIS | cut -d'(' -f2 | cut -d')' -f1))
	done
	DISTRO=$(__orc_choose __orc_DISTROS[@] __orc_DISTLYR[@] "Available distros" "Please choose a distro")
	echo ""

	if [ -z "$DISTRO" ]; then
		echo "To choose a distro interactively please install bash, dialog, or whiptail."
		echo "To choose a distro non-interactively please use the following syntax:"
		echo "    DISTRO=<your-distro> . setup"
		echo ""
		echo "Possible <your-distro> choices are:"
		echo ${__orc_DISTROS[*]} | tr ' ' '\n' | sed -e 's/^/\t/'
		return
	fi
fi
if [ -z "$DISTRO" ]; then
	DISTRO=poky
fi

## specify your DL_DIR
if [ -z "$DL_DIR" ]; then
	DL_DIR=$(__orc_dldir)

	if [ -z "$DL_DIR" ]; then
		DL_DIR="$__orc_OEROOT/downloads"
	fi
fi

# Clean up PATH, because if it includes tokens to current directories somehow,
# wrong binaries can be used instead of the expected ones during task execution
export PATH="$(echo $PATH | sed -e 's/\(:.\|:\)*:/:/g;s/^.\?://;s/:.\?$//')"
__orc_NEWPATHS="$__orc_OEROOT/layers/openembedded-core/scripts:$__orc_OEROOT/bitbake/bin:"
export PATH=$__orc_NEWPATHS$(echo $PATH | sed -e "s|:$__orc_NEWPATHS|:|g" -e "s|^$__orc_NEWPATHS||")

# Make sure Bitbake doesn't filter out the following variables from our environment.
export BB_ENV_EXTRAWHITE="MACHINE DISTRO TCMODE TCLIBC HTTP_PROXY http_proxy \
HTTPS_PROXY https_proxy FTP_PROXY ftp_proxy FTPS_PROXY ftps_proxy ALL_PROXY \
all_proxy NO_PROXY no_proxy SSH_AGENT_PID SSH_AUTH_SOCK BB_SRCREV_POLICY \
SDKMACHINE BB_NUMBER_THREADS BB_NO_NETWORK PARALLEL_MAKE GIT_PROXY_COMMAND \
SOCKS5_PASSWD SOCKS5_USER SCREENDIR STAMPS_DIR"

__orc_TEMPLATECONF=$__orc_OEROOT/.repo/manifests/conf
BUILDDIR="$1"
if [ -z "$BUILDDIR" ]; then
	BUILDDIR=build-$DISTRO
fi
BUILDDIR=$__orc_OEROOT/$BUILDDIR
mkdir -p $BUILDDIR/conf
if [ ! -r $BUILDDIR/conf/local.conf ]; then
	cp $__orc_TEMPLATECONF/local.conf $BUILDDIR/conf/local.conf
fi
if [ ! -r $BUILDDIR/conf/bblayers.conf ]; then
	sed -e "s|##OEROOT##|$__orc_OEROOT|g" $__orc_TEMPLATECONF/bblayers.conf > "$BUILDDIR/conf/bblayers.conf"
fi

cat > $BUILDDIR/conf/auto.conf <<-EOF
	MACHINE ?= "$MACHINE"
	SDKMACHINE ?= "$SDKMACHINE"
	DISTRO ?= "$DISTRO"
	BBLAYERS_FETCH_DIR = "$__orc_OEROOT/layers"
EOF

if [ ! -e $BUILDDIR/conf/site.conf ]; then
	cat > $BUILDDIR/conf/site.conf <<-EOF
		SCONF_VERSION = "1"
		DL_DIR ?= "$DL_DIR"
		SSTATE_DIR ?= "$__orc_OEROOT/sstate-cache"
		# Which files do we want to parse:
		BBFILES ?= "$__orc_OEROOT/layers/openembedded-core/meta/recipes-*/*/*.bb"
	EOF
fi

__orc_imagesNlayers __orc_IMAGETARGETS
cat <<EOF
Your build environemnt has been configured with:

	MACHINE: $MACHINE
	SDKMACHINE: $SDKMACHINE
	DISTRO: $DISTRO
	DL_DIR: $DL_DIR
	SSTATE_DIR: $SSTATE_DIR

You can now run 'bitbake <target>'

Some image targets are:
EOF
echo $__orc_IMAGETARGETS | tr ' ' '\n' | sed -e 's/^/\t/' | sed -e 's/(/ (/'

cd $BUILDDIR

# if the user hasn't selected 'angstrom' as their DISTRO we need to remove its layer
if [ x"$DISTRO" != x"angstrom" ]; then
	bitbake-layers remove-layer *angstrom
	if [ $? -ne 0 ]; then
		echo "You have selected a DISTRO other than 'angstrom' ($DISTRO)"
		echo "but I wasn't able to remove meta-angstrom, therefore it will"
		echo "set your DISTRO to angstrom unless you remove meta-angstrom"
		echo "from your conf/bblayers.conf manually."
	fi
fi
